// This file is auto-generated by @hey-api/openapi-ts

/**
 * CleanSimilarityPair
 */
export type CleanSimilarityPair = {
  /**
   * Keep Id
   */
  keep_id: string
  /**
   * Remove Id
   */
  remove_id: string
  /**
   * Similarity
   */
  similarity: number
  /**
   * Keep Question
   */
  keep_question: string
  /**
   * Remove Question
   */
  remove_question: string
}

/**
 * CleanSimilarityResponse
 */
export type CleanSimilarityResponse = {
  /**
   * Dataset Id
   */
  dataset_id: string
  /**
   * Dataset Name
   */
  dataset_name: string
  /**
   * Threshold
   */
  threshold: number
  /**
   * Total Records
   */
  total_records: number
  /**
   * Removed Records
   */
  removed_records: number
  /**
   * Details
   */
  details: Array<CleanSimilarityPair>
  /**
   * Removed Items
   */
  removed_items: Array<RemovedRecord>
}

/**
 * DatasetGenerationRequest
 * Model for dataset generation request
 */
export type DatasetGenerationRequest = {
  /**
   * Url
   * URL to process to generate the dataset
   */
  url: string
  /**
   * Dataset Name
   * Name of the dataset to create
   */
  dataset_name: string
  /**
   * Model Cleaning
   * Model to use for text cleaning
   */
  model_cleaning?: string | null
  /**
   * Target Language
   * Target language for QA generation
   */
  target_language?: string | null
  /**
   * Model Qa
   * Model to use for QA generation
   */
  model_qa?: string | null
  /**
   * Similarity Threshold
   * Similarity threshold to detect duplicates (0.0-1.0)
   */
  similarity_threshold?: number
}

/**
 * DatasetGenerationResponse
 * Model for dataset generation response
 */
export type DatasetGenerationResponse = {
  /**
   * Id
   * ID of the dataset
   */
  id: string
  /**
   * Qa Pairs
   * List of generated question-answer pairs
   */
  qa_pairs: Array<QaPair>
  /**
   * Dataset Name
   * Name of the dataset
   */
  dataset_name: string
  /**
   * Model Cleaning
   * Model used for text cleaning
   */
  model_cleaning: string
  /**
   * Target Language
   * Target language used
   */
  target_language: string
  /**
   * Model Qa
   * Model used for QA generation
   */
  model_qa: string
  /**
   * Similarity Threshold
   * Similarity threshold used
   */
  similarity_threshold: number
  /**
   * Total Questions
   * Total number of generated questions
   */
  total_questions: number
  /**
   * Processing Time
   * Processing time in seconds
   */
  processing_time: number
}

/**
 * DatasetResponse
 */
export type DatasetResponse = {
  /**
   * Id
   */
  id: string
  /**
   * Name
   */
  name: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Qa Sources Count
   */
  qa_sources_count?: number | null
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Message
   */
  message?: string | null
}

/**
 * DeleteDatasetResponse
 */
export type DeleteDatasetResponse = {
  /**
   * Message
   */
  message: string
  /**
   * Dataset Id
   */
  dataset_id: string
  /**
   * Records Deleted
   */
  records_deleted: number
}

/**
 * ErrorResponse
 * Model for error responses
 */
export type ErrorResponse = {
  /**
   * Detail
   * Detailed error description
   */
  detail: string
  /**
   * Error Code
   * Specific error code
   */
  error_code?: string | null
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>
}

/**
 * QAItem
 * Modèle pour un élément Q&A individuel
 */
export type QaItem = {
  /**
   * Id
   * ID unique de la question-réponse
   */
  id: string
  /**
   * Question
   * Question
   */
  question: string
  /**
   * Answer
   * Réponse
   */
  answer: string
  /**
   * Context
   * Contexte source
   */
  context: string
  /**
   * Source Url
   * URL source
   */
  source_url?: string | null
  /**
   * Confidence
   * Niveau de confiance
   */
  confidence?: number
  /**
   * Created At
   * Date de création
   */
  created_at: string
  /**
   * Metadata
   * Métadonnées additionnelles
   */
  metadata?: {
    [key: string]: unknown
  } | null
}

/**
 * QAListResponse
 * Modèle de réponse pour la liste des Q&A d'un dataset
 */
export type QaListResponse = {
  /**
   * Dataset Name
   * Nom du dataset
   */
  dataset_name: string
  /**
   * Dataset Id
   * ID du dataset
   */
  dataset_id: string
  /**
   * Total Count
   * Nombre total d'éléments
   */
  total_count: number
  /**
   * Returned Count
   * Nombre d'éléments retournés
   */
  returned_count: number
  /**
   * Offset
   * Décalage appliqué
   */
  offset?: number
  /**
   * Limit
   * Limite appliquée
   */
  limit?: number | null
  /**
   * Qa Data
   * Liste des questions-réponses
   */
  qa_data: Array<QaItem>
}

/**
 * QAPair
 * Model for a question-answer pair
 */
export type QaPair = {
  /**
   * Question
   * Generated question
   */
  question: string
  /**
   * Answer
   * Corresponding answer
   */
  answer: string
}

/**
 * QAResponse
 * Modèle de réponse pour une Q&A individuelle
 */
export type QaResponse = {
  /**
   * Id
   * ID unique de la question-réponse
   */
  id: string
  /**
   * Question
   * Question
   */
  question: string
  /**
   * Answer
   * Réponse
   */
  answer: string
  /**
   * Context
   * Contexte source
   */
  context: string
  /**
   * Source Url
   * URL source
   */
  source_url?: string | null
  /**
   * Confidence
   * Niveau de confiance
   */
  confidence?: number
  /**
   * Created At
   * Date de création
   */
  created_at: string
  /**
   * Updated At
   * Date de dernière modification
   */
  updated_at?: string | null
  /**
   * Metadata
   * Métadonnées additionnelles
   */
  metadata?: {
    [key: string]: unknown
  } | null
  /**
   * Dataset
   * Informations du dataset associé
   */
  dataset?: {
    [key: string]: string | null
  } | null
}

/**
 * RemovedRecord
 */
export type RemovedRecord = {
  /**
   * Id
   */
  id: string
  /**
   * Question
   */
  question: string
  /**
   * Similarity
   */
  similarity: number
  /**
   * Kept Id
   */
  kept_id: string
}

/**
 * SimilarityAnalysisResponse
 */
export type SimilarityAnalysisResponse = {
  /**
   * Dataset Id
   */
  dataset_id: string
  /**
   * Dataset Name
   */
  dataset_name: string
  /**
   * Threshold
   */
  threshold: number
  /**
   * Total Records
   */
  total_records: number
  /**
   * Similar Pairs Found
   */
  similar_pairs_found: number
  /**
   * Similarities
   */
  similarities: Array<SimilarityPair>
}

/**
 * SimilarityPair
 */
export type SimilarityPair = {
  /**
   * Record1 Id
   */
  record1_id: string
  /**
   * Record2 Id
   */
  record2_id: string
  /**
   * Similarity
   */
  similarity: number
  /**
   * Question1
   */
  question1: string
  /**
   * Question2
   */
  question2: string
}

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

export type CreateDatasetForUrlDatasetGeneratePostData = {
  body: DatasetGenerationRequest
  path?: never
  query?: never
  url: '/dataset/generate'
}

export type CreateDatasetForUrlDatasetGeneratePostErrors = {
  /**
   * Invalid parameters (model not available, unsupported language, etc.)
   */
  400: ErrorResponse
  /**
   * Validation Error
   */
  422: HttpValidationError
  /**
   * Internal server error
   */
  500: ErrorResponse
}

export type CreateDatasetForUrlDatasetGeneratePostError =
  CreateDatasetForUrlDatasetGeneratePostErrors[keyof CreateDatasetForUrlDatasetGeneratePostErrors]

export type CreateDatasetForUrlDatasetGeneratePostResponses = {
  /**
   * Dataset created successfully
   */
  201: DatasetGenerationResponse
}

export type CreateDatasetForUrlDatasetGeneratePostResponse =
  CreateDatasetForUrlDatasetGeneratePostResponses[keyof CreateDatasetForUrlDatasetGeneratePostResponses]

export type GetAllDatasetsDatasetGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Dataset Id
     * Optional dataset ID to get specific dataset details
     */
    dataset_id?: string
  }
  url: '/dataset'
}

export type GetAllDatasetsDatasetGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetAllDatasetsDatasetGetError =
  GetAllDatasetsDatasetGetErrors[keyof GetAllDatasetsDatasetGetErrors]

export type GetAllDatasetsDatasetGetResponses = {
  /**
   * Response Get All Datasets Dataset Get
   * Successful Response
   */
  200: DatasetResponse | Array<DatasetResponse>
}

export type GetAllDatasetsDatasetGetResponse =
  GetAllDatasetsDatasetGetResponses[keyof GetAllDatasetsDatasetGetResponses]

export type CreateDatasetDatasetPostData = {
  body?: never
  path?: never
  query: {
    /**
     * Name
     * Name of the new dataset
     */
    name: string
    /**
     * Description
     * Optional dataset description
     */
    description?: string
  }
  url: '/dataset'
}

export type CreateDatasetDatasetPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateDatasetDatasetPostError =
  CreateDatasetDatasetPostErrors[keyof CreateDatasetDatasetPostErrors]

export type CreateDatasetDatasetPostResponses = {
  /**
   * Successful Response
   */
  200: DatasetResponse
}

export type CreateDatasetDatasetPostResponse =
  CreateDatasetDatasetPostResponses[keyof CreateDatasetDatasetPostResponses]

export type AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetData = {
  body?: never
  path: {
    /**
     * Dataset Id
     */
    dataset_id: string
  }
  query?: {
    /**
     * Threshold
     * Similarity threshold
     */
    threshold?: number
  }
  url: '/dataset/{dataset_id}/analyze-similarities'
}

export type AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetError =
  AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetErrors[keyof AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetErrors]

export type AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetResponses = {
  /**
   * Successful Response
   */
  200: SimilarityAnalysisResponse
}

export type AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetResponse =
  AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetResponses[keyof AnalyzeSimilaritiesDatasetDatasetIdAnalyzeSimilaritiesGetResponses]

export type CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostData = {
  body?: never
  path: {
    /**
     * Dataset Id
     */
    dataset_id: string
  }
  query?: {
    /**
     * Threshold
     * Similarity threshold to detect duplicates (0.0-1.0)
     */
    threshold?: number
  }
  url: '/dataset/{dataset_id}/clean-similarities'
}

export type CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostError =
  CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostErrors[keyof CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostErrors]

export type CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostResponses = {
  /**
   * Successful Response
   */
  200: CleanSimilarityResponse
}

export type CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostResponse =
  CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostResponses[keyof CleanSimilaritiesDatasetDatasetIdCleanSimilaritiesPostResponses]

export type DeleteDatasetDatasetDatasetIdDeleteData = {
  body?: never
  path: {
    /**
     * Dataset Id
     */
    dataset_id: string
  }
  query?: never
  url: '/dataset/{dataset_id}'
}

export type DeleteDatasetDatasetDatasetIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteDatasetDatasetDatasetIdDeleteError =
  DeleteDatasetDatasetDatasetIdDeleteErrors[keyof DeleteDatasetDatasetDatasetIdDeleteErrors]

export type DeleteDatasetDatasetDatasetIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: DeleteDatasetResponse
}

export type DeleteDatasetDatasetDatasetIdDeleteResponse =
  DeleteDatasetDatasetDatasetIdDeleteResponses[keyof DeleteDatasetDatasetDatasetIdDeleteResponses]

export type GetQaByDatasetQaDatasetIdGetData = {
  body?: never
  path: {
    /**
     * Dataset Id
     */
    dataset_id: string
  }
  query?: {
    /**
     * Limit
     * Limit number of results
     */
    limit?: number | null
    /**
     * Offset
     * Pagination offset
     */
    offset?: number | null
  }
  url: '/q_a/{dataset_id}'
}

export type GetQaByDatasetQaDatasetIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetQaByDatasetQaDatasetIdGetError =
  GetQaByDatasetQaDatasetIdGetErrors[keyof GetQaByDatasetQaDatasetIdGetErrors]

export type GetQaByDatasetQaDatasetIdGetResponses = {
  /**
   * Successful Response
   */
  200: QaListResponse
}

export type GetQaByDatasetQaDatasetIdGetResponse =
  GetQaByDatasetQaDatasetIdGetResponses[keyof GetQaByDatasetQaDatasetIdGetResponses]

export type GetQaByIdQaIdQaIdGetData = {
  body?: never
  path: {
    /**
     * Qa Id
     */
    qa_id: string
  }
  query?: never
  url: '/q_a/id/{qa_id}'
}

export type GetQaByIdQaIdQaIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetQaByIdQaIdQaIdGetError = GetQaByIdQaIdQaIdGetErrors[keyof GetQaByIdQaIdQaIdGetErrors]

export type GetQaByIdQaIdQaIdGetResponses = {
  /**
   * Successful Response
   */
  200: QaResponse
}

export type GetQaByIdQaIdQaIdGetResponse =
  GetQaByIdQaIdQaIdGetResponses[keyof GetQaByIdQaIdQaIdGetResponses]

export type PreviewDatasetTransformationLangfusePreviewGetData = {
  body?: never
  path?: never
  query: {
    /**
     * Dataset Name
     * Dataset name in the database
     */
    dataset_name: string
  }
  url: '/langfuse/preview'
}

export type PreviewDatasetTransformationLangfusePreviewGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PreviewDatasetTransformationLangfusePreviewGetError =
  PreviewDatasetTransformationLangfusePreviewGetErrors[keyof PreviewDatasetTransformationLangfusePreviewGetErrors]

export type PreviewDatasetTransformationLangfusePreviewGetResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ExportDatasetLangfuseExportPostData = {
  body?: never
  path?: never
  query: {
    /**
     * Dataset Name
     * Dataset name in the database
     */
    dataset_name: string
    /**
     * Langfuse Dataset Name
     * Custom name for the dataset in Langfuse
     */
    langfuse_dataset_name?: string | null
  }
  url: '/langfuse/export'
}

export type ExportDatasetLangfuseExportPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ExportDatasetLangfuseExportPostError =
  ExportDatasetLangfuseExportPostErrors[keyof ExportDatasetLangfuseExportPostErrors]

export type ExportDatasetLangfuseExportPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type RootGetData = {
  body?: never
  path?: never
  query?: never
  url: '/'
}

export type RootGetResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ClientOptions = {
  baseURL: 'http://localhost:8000' | (string & {})
}
